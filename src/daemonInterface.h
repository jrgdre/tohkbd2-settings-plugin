/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp com.kimmoli.tohkbd2.xml -p ../dbus/src/daemonInterface
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DAEMONINTERFACE_H_1443117809
#define DAEMONINTERFACE_H_1443117809

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.kimmoli.tohkbd2
 */
class ComKimmoliTohkbd2Interface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.kimmoli.tohkbd2"; }

public:
    ComKimmoliTohkbd2Interface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComKimmoliTohkbd2Interface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> forceKeymapReload(const QString &layout)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(layout);
        return asyncCallWithArgumentList(QLatin1String("forceKeymapReload"), argumentList);
    }

    inline QDBusPendingReply<QString> getVersion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getVersion"), argumentList);
    }

    inline QDBusPendingReply<> quit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("quit"), argumentList);
    }

    inline QDBusPendingReply<> setSetting(const QString &key, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QLatin1String("setSetting"), argumentList);
    }

    inline QDBusPendingReply<> setShortcut(const QString &key, const QString &appPath)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(key) << QVariant::fromValue(appPath);
        return asyncCallWithArgumentList(QLatin1String("setShortcut"), argumentList);
    }

    inline QDBusPendingReply<> setShortcutsToDefault()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("setShortcutsToDefault"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void keyboardConnectedChanged(bool connected);
};

namespace com {
  namespace kimmoli {
    typedef ::ComKimmoliTohkbd2Interface tohkbd2;
  }
}
#endif
